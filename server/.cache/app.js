(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('knex'), require('dotenv'), require('path'), require('express'), require('cors'), require('http-status-codes'), require('jsonwebtoken'), require('querystring'), require('axios'), require('@hapi/joi')) :
  typeof define === 'function' && define.amd ? define(['knex', 'dotenv', 'path', 'express', 'cors', 'http-status-codes', 'jsonwebtoken', 'querystring', 'axios', '@hapi/joi'], factory) :
  (global = global || self, factory(global.knex, global.dotenv, global.path, global.express, global.cors, global.HttpCodes, global.jwt, global.queryString, global.axios, global.Joi));
}(this, (function (knex, dotenv, path, express, cors, HttpCodes, jwt, queryString, axios, Joi) { 'use strict';

  knex = knex && knex.hasOwnProperty('default') ? knex['default'] : knex;
  dotenv = dotenv && dotenv.hasOwnProperty('default') ? dotenv['default'] : dotenv;
  var express__default = 'default' in express ? express['default'] : express;
  cors = cors && cors.hasOwnProperty('default') ? cors['default'] : cors;
  HttpCodes = HttpCodes && HttpCodes.hasOwnProperty('default') ? HttpCodes['default'] : HttpCodes;
  jwt = jwt && jwt.hasOwnProperty('default') ? jwt['default'] : jwt;
  queryString = queryString && queryString.hasOwnProperty('default') ? queryString['default'] : queryString;
  axios = axios && axios.hasOwnProperty('default') ? axios['default'] : axios;
  Joi = Joi && Joi.hasOwnProperty('default') ? Joi['default'] : Joi;

  const PATH_ROOT = path.resolve(`${__dirname}/../`);
  const PATH_PUBLIC = path.resolve(`${PATH_ROOT}/Public/`); // PARTIALS

  const PATH_PUBLIC_AVATARS = path.join(PATH_PUBLIC, '/Avatars/');

  dotenv.config();
  const {
    PORT = 8080,
    PAYPAL_ID,
    PAYPAL_SECRET,
    DATABASE_URL,
    SESSION_SECRET = 'fmjsdfbhjeg784t36745gr23'
  } = process.env;
  const PAYPAL_API_URL = 'https://api.sandbox.paypal.com';

  var Knex = knex({
    client: 'pg',
    connection: DATABASE_URL
  });

  /**
   * @param {import('Utils/errors').ApiErrorSchema} err
   * @param {import('express').Response} res
   */
  function ErrorHandler(err, req, res, next) {
    try {
      if (err && err.isCustomError) {
        /** @type {import('Utils/errors').ApiErrorSchema} */
        const {
          errorCode,
          httpCode,
          message,
          description,
          serverError
        } = err;
        const toSend = {
          message,
          errorCode
        };
        if (description) toSend.description = description;
        debugger;
        if (serverError) console.error(serverError);
        return res.status(httpCode).send(toSend);
      }

      throw Error();
    } catch (error) {
      res.status(500).send({
        error: 'Unexpected server error!'
      });
    }
  }

  /**
   * @typedef {object} ApiErrorSchema
   * @property {boolean} isCustomError
   * @property {Number} httpCode
   * @property {Number} errorCode
   * @property {String} message
   * @property {any} [description]
   * @property {any} [serverError]
   */
  let order = 1;
  const separator = 1000;
  /** Order Maters */

  function ApiErrorGenerator() {
    let localCode = order;
    order += separator;
    /**
     * @param {Number} httpCode
     * @param {String} message
     */

    function ApiError(httpCode, message) {
      const errorCode = localCode;
      localCode++;
      /** @param {any} [description]
       * @param {any} [serverError] */

      return (description, serverError) => ({
        isCustomError: true,
        errorCode,
        httpCode,
        message,
        description: description || null,
        serverError: serverError || null
      });
    }

    return ApiError;
  }

  const Invalid = ApiErrorGenerator();
  const NotAllowed = ApiErrorGenerator();
  const Unexpected = ApiErrorGenerator();
  const InvalidError = {
    code: Invalid(HttpCodes.BAD_REQUEST, 'invalid_code'),
    schema: Invalid(HttpCodes.BAD_REQUEST, 'invalid_schema')
  };
  const NotAllowedError = {
    badToken: Invalid(HttpCodes.UNAUTHORIZED, 'invalid_token')
  };
  const UnexpectedError = {
    general: Unexpected(HttpCodes.INTERNAL_SERVER_ERROR, 'general'),
    creating: Unexpected(HttpCodes.INTERNAL_SERVER_ERROR, 'failed_to_create')
  };

  const E = {
    paypal: {
      auth: {
        getTokens: () => `${PAYPAL_API_URL}/v1/oauth2/token`,
        getUserInfo: () => `${PAYPAL_API_URL}/v1/identity/oauth2/userinfo?schema=paypalv1.1`
      }
    }
  };

  /**
   * @typedef {object} getPaypalTokenReturnData
   * @property {string} access_token
   * @property {string} [refresh_token]
   * @property {number} expires_in
   */

  /**
   * @param {object} codes
   * @param {string} [codes.initialCode]
   * @param {string} [codes.refreshToken]
   * @returns {Promise<getPaypalTokenReturnData|null>}
   */

  async function getPaypalToken(codes) {
    const auth = Buffer.from(`${PAYPAL_ID}:${PAYPAL_SECRET}`).toString('base64');
    const isRefreshToken = codes.refreshToken && !codes.initialCode;
    const payload = {};

    if (isRefreshToken) {
      payload.grant_type = 'refresh_token';
      payload.refresh_token = codes.refreshToken;
    } else {
      payload.grant_type = 'authorization_code';
      payload.code = codes.initialCode;
    }

    try {
      const {
        data
      } = await axios.post(E.paypal.auth.getTokens(), // @ts-ignore
      queryString.stringify(payload), {
        headers: { ...axios.defaults.headers,
          Authorization: `Basic ${auth}`,
          'Content-type': 'application/x-www-form-urlencoded'
        }
      });
      const {
        access_token,
        refresh_token,
        expires_in
      } = data;
      const dataToReturn = {
        access_token,
        expires_in
      };
      if (refresh_token) dataToReturn.refresh_token = refresh_token;
      return dataToReturn;
    } catch (err) {
      return null;
    }
  }
  /**
   * @typedef {object} getPaypalUserInfoReturnData
   * @property {string} userId
   * @property {string} email
   */

  /**
   * @param {string} activeToken
   * @returns {Promise<getPaypalUserInfoReturnData|null>}
   */

  async function getPaypalUserInfo(activeToken) {
    try {
      const res = await axios.get(E.paypal.auth.getUserInfo(), {
        headers: {
          Authorization: `Bearer ${activeToken}`,
          'Content-Type': 'application/json'
        }
      });
      const {
        data
      } = res;
      const {
        user_id,
        emails = []
      } = data;
      const {
        value: primaryEmail
      } = emails.find(({
        primary
      }) => primary === true);
      return {
        email: primaryEmail,
        userId: user_id
      };
    } catch ({
      response
    }) {
      const {
        data
      } = response;
      console.log(data);
      return null;
    }
  }

  /* eslint-disable lines-between-class-members */
  const User = {
    userId: 'userId',
    refreshToken: 'refreshToken',
    email: 'email',

    /** @returns Promise<{{error: object, data: object }}> */
    validate: async data => ({
      error: {},
      data: {}
    })
  };
  const userSchema = Joi.object({
    [User.userId]: Joi.string().required(),
    [User.refreshToken]: Joi.string().required(),
    [User.email]: Joi.string().required()
  });

  User.validate = async data => {
    const validation = {
      data: null,
      error: null
    };

    try {
      validation.data = await userSchema.validateAsync(data, {
        presence: 'required'
      });
    } catch (error) {
      validation.error = error.details;
    }

    return validation;
  };

  /* eslint-disable no-shadow */
  /** @param {string} paypalAuthCode
      @returns {Promise<
      GenericResponse<object>>}
    */

  async function userAuth(paypalAuthCode) {
    try {
      // debugger;
      const tokens = await getPaypalToken({
        initialCode: paypalAuthCode
      }); // console.timeLog('Request');

      if (!tokens) return [true, InvalidError.code('PayPal code is invalid!')];
      const info = await getPaypalUserInfo(tokens.access_token);
      const user = {
        [User.userId]: info.userId,
        [User.email]: info.email,
        [User.refreshToken]: tokens.refresh_token
      };
      const {
        data,
        error
      } = await User.validate(user);
      if (error) return [true, InvalidError.schema(data)];

      try {
        const res = await Knex('users').where({
          userId: info.userId
        }).update(user);

        if (res === 0) {
          const res = await Knex('users').insert(user); // @ts-ignore

          if (!(res === null || res === void 0 ? void 0 : res.rowCount)) {
            throw Error;
          } // On Create

        } else {} // On Update
          // eslint-disable-next-line no-shadow

      } catch (error) {
        // If couldn't create user
        return [true, UnexpectedError.creating('Could not create user', error)];
      }

      const token = jwt.sign({
        userId: info.userId,
        paypalToken: tokens.access_token
      }, SESSION_SECRET, {
        expiresIn: tokens.expires_in - 100
      });
      return [false, {
        user: info,
        token
      }];
    } catch (error) {
      return [true, UnexpectedError.general()];
    }
  }

  const router = express.Router();
  router.get('/', (req, res) => {
    res.send({
      link: `https://www.sandbox.paypal.com/connect?flowEntry=static&client_id=${PAYPAL_ID}&scope=openid%20email&redirect_uri=http%3A%2F%2F127.0.0.1:3000%2Fpaypal-return`
    });
  });
  router.post('/', async (req, res, next) => {
    const {
      code
    } = req.body;
    const [error, data] = await userAuth(code);
    if (error) return next(data);
    return res.send(data);
  });
  /** @param {Router} handler */

  var User$1 = (handler => handler.use('/users', router));

  /**
   * Adds ***user*** and ***token*** to request object
   */

  async function Secured(req, res, next) {
    try {
      const token = req.header('Authorization').replace('Bearer ', '');
      const data = jwt.verify(token, SESSION_SECRET);
      req.user = data;
      req.token = token;
      next();
    } catch (err) {
      const error = NotAllowedError.badToken('You have supplied an invalid token!');
      return ErrorHandler(error, req, res);
    }
  }

  const router$1 = express.Router();
  router$1.get('/', Secured, (req, res) => {
    res.send(req.user);
  });
  router$1.post('/');
  /** @param {Router} handler */

  var Transactions = (handler => handler.use('/transactions', router$1));

  const apiRouter = express.Router();
  User$1(apiRouter);
  Transactions(apiRouter); // Main Router

  const rootRouter = express.Router();
  rootRouter.use('/api', apiRouter);
  rootRouter.get('/', (req, res) => {
    res.sendStatus(HttpCodes.IM_A_TEAPOT);
  });
  rootRouter.use(ErrorHandler); // MISC

  const app = express__default();
  app.use(cors());
  app.use(express__default.json());
  app.use(rootRouter);
  app.listen(PORT, () => {
    console.log(`Server running on port: ${PORT}`);
  });

})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
